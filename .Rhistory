#Problem: Let coin A have an H probability of 0.2, and let coin B have an H probability of 0.8. This is a simulation for determining the optimal number of flips in order to deliver the highest sensitivity at a particular threshhold for the probability of success.
library(stats4)
library(mvc)
source("SimulateCoinFlip.R")
#Declare parameters
A_prob <- 0.4
B_prob <- 0.6
N_A <- 50
N_B <- 50
N_Tot <- N_A + N_B
bins <- 50
n_flips_sample <- 10
n_flips_test <- 10
sens_thresh <- 0.5
#Obtain the number of A and B coins based on a single sample of a 100-sample Binomial distribution (ie. how many A coins in 100 trials, assuming each coin is equally likely to be picked)
set.seed(100)
binom <- rbinom(1, N_Tot, 0.5)
binom
test <- SimulateCoinFlip(binom, n_flips_sample, A_prob, B_prob, N_A, N_B, N_Tot, bins)
#Flip each coin 10 times and compute the maximum likelihood of the observation
set.seed(100)
A_flips <- rbinom(binom, n_flips_sample, A_prob)
B_flips <- rbinom(N_Tot - binom, n_flips_sample, B_prob)
A_vector <- c(rep(1, A_flips[2]), rep(0, n_flips_sample - A_flips[2]))
LL <- function(prob){
R = dbern(A_vector, prob)
-sum(log(R))
}
output <- mle(LL, start = list(prob = 0.5))
prob <- slot(output, 'coef')
prob[[1]]
A_likelihoods <- c()
B_likelihoods <- c()
for (val in A_flips) {
A_vector <- c(rep(1, val), rep(0, n_flips_sample - val))
LL <- function(prob){
R = dbern(A_vector, prob)
-sum(log(R))
}
output <- suppressWarnings(mle(LL, start = list(prob = 0.9)))
prob <- slot(output, 'coef')
A_likelihoods <- c(A_likelihoods, prob[[1]])
}
for (val in B_flips) {
B_vector <- c(rep(1, val), rep(0, n_flips_sample - val))
LL <- function(prob){
R = dbern(B_vector, prob)
-sum(log(R))
}
output <- suppressWarnings(mle(LL, start = list(prob = 0.9)))
prob <- slot(output, 'coef')
B_likelihoods <- c(B_likelihoods, prob[[1]])
}
B_likelihoods
#Bin the maximum likelihoods and compute classification correctness based on sensitivity threshhold
A_binned <- round(A_likelihoods, digits = 1)
B_binned <- round(B_likelihoods, digits = 1)
A_unique <- unique(A_binned)
B_unique <- unique(B_binned)
A_counts <- rep(0, length(A_unique))
B_counts <- rep(0, length(B_unique))
for (i in 1:length(A_unique)) {
for (j in A_binned) {
if (j == A_unique[i]) {
A_counts[i] <- A_counts[i] + 1
}
}
}
for (i in 1:length(B_unique)) {
for (j in B_binned) {
if (j == B_unique[i]) {
B_counts[i] <- B_counts[i] + 1
}
}
}
A_unique
A_counts
B_unique
B_counts
#Get the corresponding SigMA score
master_set <- c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1)
SigMA_scores <- rep(0, 11)
for (index in 1:length(master_set)) {
num <- master_set[index]
if (num %in% A_unique) {
A_index <- match(num, A_unique)
if (num %in% B_unique) {
B_index <- match(num, B_unique)
SigMA_scores[index] <- (A_counts[A_index] / (A_counts[A_index] + B_counts[B_index]))
#print(SigMA_scores)
} else{
SigMA_scores[index] <- 1
}
} else if ((num %in% B_unique)) {
SigMA_scores[index] <- 1
} else {
SigMA_scores[index] <- 0.5
}
}
SigMA_scores
#Classify based on sensitivity threshhold
classified <- c()
for (prob in SigMA_scores) {
if (prob >= sens_thresh) {
classified <- c(classified, 1)
} else {
classified <- c(classified, 0)
}
}
classified
#Declare parameters
A_prob <- 0.4
B_prob <- 0.6
N_A <- 50
N_B <- 50
N_Tot <- N_A + N_B
N_Test <- 20
bins <- 50
n_flips_sample <- 10
n_flips_test <- 10
sens_thresh <- 0.5
#Declare parameters
A_prob <- 0.4
B_prob <- 0.6
N_A <- 50
N_B <- 50
A_Draw_prob <- N_A / (N_A + N_B)
N_Sample <- 100
N_Test <- 20
bins <- 50
n_flips_sample <- 10
n_flips_test <- 10
sens_thresh <- 0.5
#Obtain the number of A and B coins based on a single sample of a 100-sample Binomial distribution (ie. how many A coins in 100 trials, assuming each coin is equally likely to be picked)
set.seed(100)
binom <- rbinom(1, N_Sample, A_Draw_prob)
binom
test <- SimulateCoinFlip(binom, n_flips_sample, A_prob, B_prob,N_Sample, bins)
library(stats4)
library(mvc)
source("SimulateCoinFlip.R")
#Obtain the number of A and B coins based on a single sample of a 100-sample Binomial distribution (ie. how many A coins in 100 trials, assuming each coin is equally likely to be picked)
set.seed(100)
binom <- rbinom(1, N_Sample, A_Draw_prob)
binom
test <- SimulateCoinFlip(binom, n_flips_sample, A_prob, B_prob, N_Sample, bins)
#Classify based on sensitivity threshhold
classified <- c()
for (prob in SigMA_scores) {
if (prob >= sens_thresh) {
classified <- c(classified, 1)
} else {
classified <- c(classified, 0)
}
}
classified
#Test based on a random coin
set.seed(150)
A_num_test <- rbinom(1, N_Test, 0.5)
test <- SimulateCoinFlip(A_num_test, n_flips_test, A_prob, B_prob, N_Test, bins)
test[1]
#Test based on a random coin
set.seed(150)
A_num_test <- rbinom(1, N_Test, 0.5)
A_num_test
test <- SimulateCoinFlip(A_num_test, n_flips_test, A_prob, B_prob, N_Test, bins)
test[1]
#Test based on a random coin
set.seed(150)
A_num_test <- rbinom(1, N_Test, 0.5)
A_num_test
test <- SimulateCoinFlip(A_num_test, n_flips_test, A_prob, B_prob, N_Test, bins)
A_unique_test <- test[1]
A_counts_test <- test[2]
B_unique_test <- test[3]
B_counts_test <- test[4]
A_counts_test
#Test based on a random coin
set.seed(150)
A_num_test <- rbinom(1, N_Test, 0.5)
A_num_test
test <- SimulateCoinFlip(A_num_test, n_flips_test, A_prob, B_prob, N_Test, bins)
A_unique_test <- test[1]
A_counts_test <- test[2]
B_unique_test <- test[3]
B_counts_test <- test[4]
A_unique_test
A_counts_test
